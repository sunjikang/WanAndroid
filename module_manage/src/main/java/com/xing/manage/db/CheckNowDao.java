package com.xing.manage.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHECK_NOW".
*/
public class CheckNowDao extends AbstractDao<CheckNow, Long> {

    public static final String TABLENAME = "CHECK_NOW";

    /**
     * Properties of entity CheckNow.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DeviceName = new Property(1, String.class, "deviceName", false, "DEVICE_NAME");
        public final static Property DeviceGroup = new Property(2, String.class, "deviceGroup", false, "DEVICE_GROUP");
        public final static Property DepartmentName = new Property(3, String.class, "departmentName", false, "DEPARTMENT_NAME");
        public final static Property DeviceKKS = new Property(4, String.class, "deviceKKS", false, "DEVICE_KKS");
        public final static Property CheckName = new Property(5, String.class, "checkName", false, "CHECK_NAME");
    }

    private DaoSession daoSession;


    public CheckNowDao(DaoConfig config) {
        super(config);
    }
    
    public CheckNowDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHECK_NOW\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DEVICE_NAME\" TEXT," + // 1: deviceName
                "\"DEVICE_GROUP\" TEXT," + // 2: deviceGroup
                "\"DEPARTMENT_NAME\" TEXT," + // 3: departmentName
                "\"DEVICE_KKS\" TEXT," + // 4: deviceKKS
                "\"CHECK_NAME\" TEXT);"); // 5: checkName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHECK_NOW\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CheckNow entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String deviceName = entity.getDeviceName();
        if (deviceName != null) {
            stmt.bindString(2, deviceName);
        }
 
        String deviceGroup = entity.getDeviceGroup();
        if (deviceGroup != null) {
            stmt.bindString(3, deviceGroup);
        }
 
        String departmentName = entity.getDepartmentName();
        if (departmentName != null) {
            stmt.bindString(4, departmentName);
        }
 
        String deviceKKS = entity.getDeviceKKS();
        if (deviceKKS != null) {
            stmt.bindString(5, deviceKKS);
        }
 
        String checkName = entity.getCheckName();
        if (checkName != null) {
            stmt.bindString(6, checkName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CheckNow entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String deviceName = entity.getDeviceName();
        if (deviceName != null) {
            stmt.bindString(2, deviceName);
        }
 
        String deviceGroup = entity.getDeviceGroup();
        if (deviceGroup != null) {
            stmt.bindString(3, deviceGroup);
        }
 
        String departmentName = entity.getDepartmentName();
        if (departmentName != null) {
            stmt.bindString(4, departmentName);
        }
 
        String deviceKKS = entity.getDeviceKKS();
        if (deviceKKS != null) {
            stmt.bindString(5, deviceKKS);
        }
 
        String checkName = entity.getCheckName();
        if (checkName != null) {
            stmt.bindString(6, checkName);
        }
    }

    @Override
    protected final void attachEntity(CheckNow entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CheckNow readEntity(Cursor cursor, int offset) {
        CheckNow entity = new CheckNow( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // deviceName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // deviceGroup
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // departmentName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // deviceKKS
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // checkName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CheckNow entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDeviceName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDeviceGroup(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDepartmentName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDeviceKKS(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCheckName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CheckNow entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CheckNow entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CheckNow entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
