package com.xing.manage.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.xing.manage.bean.device.Area;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "AREA".
*/
public class AreaDao extends AbstractDao<Area, Long> {

    public static final String TABLENAME = "AREA";

    /**
     * Properties of entity Area.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property LineId = new Property(0, Long.class, "lineId", false, "LINE_ID");
        public final static Property Id = new Property(1, Long.class, "id", true, "_id");
        public final static Property CreateBy = new Property(2, String.class, "createBy", false, "CREATE_BY");
        public final static Property CreateTime = new Property(3, String.class, "createTime", false, "CREATE_TIME");
        public final static Property UpdateBy = new Property(4, String.class, "updateBy", false, "UPDATE_BY");
        public final static Property UpdateTime = new Property(5, String.class, "updateTime", false, "UPDATE_TIME");
        public final static Property DelFlag = new Property(6, String.class, "delFlag", false, "DEL_FLAG");
        public final static Property OpenStatus = new Property(7, String.class, "openStatus", false, "OPEN_STATUS");
        public final static Property AreaCode = new Property(8, String.class, "areaCode", false, "AREA_CODE");
        public final static Property Title = new Property(9, String.class, "title", false, "TITLE");
        public final static Property Specialty = new Property(10, String.class, "specialty", false, "SPECIALTY");
        public final static Property Unit = new Property(11, String.class, "unit", false, "UNIT");
        public final static Property Remark = new Property(12, String.class, "remark", false, "REMARK");
        public final static Property StandbyI = new Property(13, String.class, "standbyI", false, "STANDBY_I");
        public final static Property StandbyII = new Property(14, String.class, "standbyII", false, "STANDBY_II");
        public final static Property StandbyIII = new Property(15, String.class, "standbyIII", false, "STANDBY_III");
    }

    private DaoSession daoSession;

    private Query<Area> line_DmListQuery;

    public AreaDao(DaoConfig config) {
        super(config);
    }
    
    public AreaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"AREA\" (" + //
                "\"LINE_ID\" INTEGER," + // 0: lineId
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 1: id
                "\"CREATE_BY\" TEXT," + // 2: createBy
                "\"CREATE_TIME\" TEXT," + // 3: createTime
                "\"UPDATE_BY\" TEXT," + // 4: updateBy
                "\"UPDATE_TIME\" TEXT," + // 5: updateTime
                "\"DEL_FLAG\" TEXT," + // 6: delFlag
                "\"OPEN_STATUS\" TEXT," + // 7: openStatus
                "\"AREA_CODE\" TEXT," + // 8: areaCode
                "\"TITLE\" TEXT," + // 9: title
                "\"SPECIALTY\" TEXT," + // 10: specialty
                "\"UNIT\" TEXT," + // 11: unit
                "\"REMARK\" TEXT," + // 12: remark
                "\"STANDBY_I\" TEXT," + // 13: standbyI
                "\"STANDBY_II\" TEXT," + // 14: standbyII
                "\"STANDBY_III\" TEXT);"); // 15: standbyIII
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"AREA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Area entity) {
        stmt.clearBindings();
 
        Long lineId = entity.getLineId();
        if (lineId != null) {
            stmt.bindLong(1, lineId);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(2, id);
        }
 
        String createBy = entity.getCreateBy();
        if (createBy != null) {
            stmt.bindString(3, createBy);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(4, createTime);
        }
 
        String updateBy = entity.getUpdateBy();
        if (updateBy != null) {
            stmt.bindString(5, updateBy);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(6, updateTime);
        }
 
        String delFlag = entity.getDelFlag();
        if (delFlag != null) {
            stmt.bindString(7, delFlag);
        }
 
        String openStatus = entity.getOpenStatus();
        if (openStatus != null) {
            stmt.bindString(8, openStatus);
        }
 
        String areaCode = entity.getAreaCode();
        if (areaCode != null) {
            stmt.bindString(9, areaCode);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(10, title);
        }
 
        String specialty = entity.getSpecialty();
        if (specialty != null) {
            stmt.bindString(11, specialty);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(12, unit);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(13, remark);
        }
 
        String standbyI = entity.getStandbyI();
        if (standbyI != null) {
            stmt.bindString(14, standbyI);
        }
 
        String standbyII = entity.getStandbyII();
        if (standbyII != null) {
            stmt.bindString(15, standbyII);
        }
 
        String standbyIII = entity.getStandbyIII();
        if (standbyIII != null) {
            stmt.bindString(16, standbyIII);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Area entity) {
        stmt.clearBindings();
 
        Long lineId = entity.getLineId();
        if (lineId != null) {
            stmt.bindLong(1, lineId);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(2, id);
        }
 
        String createBy = entity.getCreateBy();
        if (createBy != null) {
            stmt.bindString(3, createBy);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(4, createTime);
        }
 
        String updateBy = entity.getUpdateBy();
        if (updateBy != null) {
            stmt.bindString(5, updateBy);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(6, updateTime);
        }
 
        String delFlag = entity.getDelFlag();
        if (delFlag != null) {
            stmt.bindString(7, delFlag);
        }
 
        String openStatus = entity.getOpenStatus();
        if (openStatus != null) {
            stmt.bindString(8, openStatus);
        }
 
        String areaCode = entity.getAreaCode();
        if (areaCode != null) {
            stmt.bindString(9, areaCode);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(10, title);
        }
 
        String specialty = entity.getSpecialty();
        if (specialty != null) {
            stmt.bindString(11, specialty);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(12, unit);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(13, remark);
        }
 
        String standbyI = entity.getStandbyI();
        if (standbyI != null) {
            stmt.bindString(14, standbyI);
        }
 
        String standbyII = entity.getStandbyII();
        if (standbyII != null) {
            stmt.bindString(15, standbyII);
        }
 
        String standbyIII = entity.getStandbyIII();
        if (standbyIII != null) {
            stmt.bindString(16, standbyIII);
        }
    }

    @Override
    protected final void attachEntity(Area entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1);
    }    

    @Override
    public Area readEntity(Cursor cursor, int offset) {
        Area entity = new Area( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // lineId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // createBy
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // createTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // updateBy
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // updateTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // delFlag
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // openStatus
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // areaCode
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // title
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // specialty
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // unit
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // remark
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // standbyI
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // standbyII
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // standbyIII
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Area entity, int offset) {
        entity.setLineId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setCreateBy(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCreateTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUpdateBy(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUpdateTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDelFlag(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setOpenStatus(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAreaCode(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTitle(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSpecialty(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUnit(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setRemark(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setStandbyI(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setStandbyII(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setStandbyIII(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Area entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Area entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Area entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "dmList" to-many relationship of Line. */
    public List<Area> _queryLine_DmList(Long lineId) {
        synchronized (this) {
            if (line_DmListQuery == null) {
                QueryBuilder<Area> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.LineId.eq(null));
                line_DmListQuery = queryBuilder.build();
            }
        }
        Query<Area> query = line_DmListQuery.forCurrentThread();
        query.setParameter(0, lineId);
        return query.list();
    }

}
