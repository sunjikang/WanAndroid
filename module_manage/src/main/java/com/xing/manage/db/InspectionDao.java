package com.xing.manage.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.xing.manage.bean.device.Inspection;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "INSPECTION".
*/
public class InspectionDao extends AbstractDao<Inspection, Long> {

    public static final String TABLENAME = "INSPECTION";

    /**
     * Properties of entity Inspection.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property FacilityId = new Property(0, Long.class, "facilityId", false, "FACILITY_ID");
        public final static Property Id = new Property(1, Long.class, "id", true, "_id");
        public final static Property CreateBy = new Property(2, String.class, "createBy", false, "CREATE_BY");
        public final static Property CreateTime = new Property(3, String.class, "createTime", false, "CREATE_TIME");
        public final static Property UpdateBy = new Property(4, String.class, "updateBy", false, "UPDATE_BY");
        public final static Property UpdateTime = new Property(5, String.class, "updateTime", false, "UPDATE_TIME");
        public final static Property DelFlag = new Property(6, String.class, "delFlag", false, "DEL_FLAG");
        public final static Property OpenStatus = new Property(7, String.class, "openStatus", false, "OPEN_STATUS");
        public final static Property InspectionItemName = new Property(8, String.class, "inspectionItemName", false, "INSPECTION_ITEM_NAME");
        public final static Property SamplingNumber = new Property(9, String.class, "samplingNumber", false, "SAMPLING_NUMBER");
        public final static Property SampleFrequency = new Property(10, String.class, "sampleFrequency", false, "SAMPLE_FREQUENCY");
        public final static Property DefaultSpeed = new Property(11, String.class, "defaultSpeed", false, "DEFAULT_SPEED");
        public final static Property Unit = new Property(12, String.class, "unit", false, "UNIT");
        public final static Property EquipmentLevel = new Property(13, String.class, "equipmentLevel", false, "EQUIPMENT_LEVEL");
        public final static Property PollingType = new Property(14, String.class, "pollingType", false, "POLLING_TYPE");
        public final static Property PollingStatus = new Property(15, String.class, "pollingStatus", false, "POLLING_STATUS");
        public final static Property Emissivity = new Property(16, String.class, "emissivity", false, "EMISSIVITY");
        public final static Property UpperUp = new Property(17, String.class, "upperUp", false, "UPPER_UP");
        public final static Property Upper = new Property(18, String.class, "upper", false, "UPPER");
        public final static Property Floor = new Property(19, String.class, "floor", false, "FLOOR");
        public final static Property FloorFl = new Property(20, String.class, "floorFl", false, "FLOOR_FL");
        public final static Property Remark = new Property(21, String.class, "remark", false, "REMARK");
        public final static Property StandbyI = new Property(22, String.class, "standbyI", false, "STANDBY_I");
        public final static Property StandbyII = new Property(23, String.class, "standbyII", false, "STANDBY_II");
        public final static Property StandbyIII = new Property(24, String.class, "standbyIII", false, "STANDBY_III");
    }

    private Query<Inspection> facility_InspectionItemListQuery;

    public InspectionDao(DaoConfig config) {
        super(config);
    }
    
    public InspectionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INSPECTION\" (" + //
                "\"FACILITY_ID\" INTEGER," + // 0: facilityId
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 1: id
                "\"CREATE_BY\" TEXT," + // 2: createBy
                "\"CREATE_TIME\" TEXT," + // 3: createTime
                "\"UPDATE_BY\" TEXT," + // 4: updateBy
                "\"UPDATE_TIME\" TEXT," + // 5: updateTime
                "\"DEL_FLAG\" TEXT," + // 6: delFlag
                "\"OPEN_STATUS\" TEXT," + // 7: openStatus
                "\"INSPECTION_ITEM_NAME\" TEXT," + // 8: inspectionItemName
                "\"SAMPLING_NUMBER\" TEXT," + // 9: samplingNumber
                "\"SAMPLE_FREQUENCY\" TEXT," + // 10: sampleFrequency
                "\"DEFAULT_SPEED\" TEXT," + // 11: defaultSpeed
                "\"UNIT\" TEXT," + // 12: unit
                "\"EQUIPMENT_LEVEL\" TEXT," + // 13: equipmentLevel
                "\"POLLING_TYPE\" TEXT," + // 14: pollingType
                "\"POLLING_STATUS\" TEXT," + // 15: pollingStatus
                "\"EMISSIVITY\" TEXT," + // 16: emissivity
                "\"UPPER_UP\" TEXT," + // 17: upperUp
                "\"UPPER\" TEXT," + // 18: upper
                "\"FLOOR\" TEXT," + // 19: floor
                "\"FLOOR_FL\" TEXT," + // 20: floorFl
                "\"REMARK\" TEXT," + // 21: remark
                "\"STANDBY_I\" TEXT," + // 22: standbyI
                "\"STANDBY_II\" TEXT," + // 23: standbyII
                "\"STANDBY_III\" TEXT);"); // 24: standbyIII
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INSPECTION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Inspection entity) {
        stmt.clearBindings();
 
        Long facilityId = entity.getFacilityId();
        if (facilityId != null) {
            stmt.bindLong(1, facilityId);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(2, id);
        }
 
        String createBy = entity.getCreateBy();
        if (createBy != null) {
            stmt.bindString(3, createBy);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(4, createTime);
        }
 
        String updateBy = entity.getUpdateBy();
        if (updateBy != null) {
            stmt.bindString(5, updateBy);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(6, updateTime);
        }
 
        String delFlag = entity.getDelFlag();
        if (delFlag != null) {
            stmt.bindString(7, delFlag);
        }
 
        String openStatus = entity.getOpenStatus();
        if (openStatus != null) {
            stmt.bindString(8, openStatus);
        }
 
        String inspectionItemName = entity.getInspectionItemName();
        if (inspectionItemName != null) {
            stmt.bindString(9, inspectionItemName);
        }
 
        String samplingNumber = entity.getSamplingNumber();
        if (samplingNumber != null) {
            stmt.bindString(10, samplingNumber);
        }
 
        String sampleFrequency = entity.getSampleFrequency();
        if (sampleFrequency != null) {
            stmt.bindString(11, sampleFrequency);
        }
 
        String defaultSpeed = entity.getDefaultSpeed();
        if (defaultSpeed != null) {
            stmt.bindString(12, defaultSpeed);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(13, unit);
        }
 
        String equipmentLevel = entity.getEquipmentLevel();
        if (equipmentLevel != null) {
            stmt.bindString(14, equipmentLevel);
        }
 
        String pollingType = entity.getPollingType();
        if (pollingType != null) {
            stmt.bindString(15, pollingType);
        }
 
        String pollingStatus = entity.getPollingStatus();
        if (pollingStatus != null) {
            stmt.bindString(16, pollingStatus);
        }
 
        String emissivity = entity.getEmissivity();
        if (emissivity != null) {
            stmt.bindString(17, emissivity);
        }
 
        String upperUp = entity.getUpperUp();
        if (upperUp != null) {
            stmt.bindString(18, upperUp);
        }
 
        String upper = entity.getUpper();
        if (upper != null) {
            stmt.bindString(19, upper);
        }
 
        String floor = entity.getFloor();
        if (floor != null) {
            stmt.bindString(20, floor);
        }
 
        String floorFl = entity.getFloorFl();
        if (floorFl != null) {
            stmt.bindString(21, floorFl);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(22, remark);
        }
 
        String standbyI = entity.getStandbyI();
        if (standbyI != null) {
            stmt.bindString(23, standbyI);
        }
 
        String standbyII = entity.getStandbyII();
        if (standbyII != null) {
            stmt.bindString(24, standbyII);
        }
 
        String standbyIII = entity.getStandbyIII();
        if (standbyIII != null) {
            stmt.bindString(25, standbyIII);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Inspection entity) {
        stmt.clearBindings();
 
        Long facilityId = entity.getFacilityId();
        if (facilityId != null) {
            stmt.bindLong(1, facilityId);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(2, id);
        }
 
        String createBy = entity.getCreateBy();
        if (createBy != null) {
            stmt.bindString(3, createBy);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(4, createTime);
        }
 
        String updateBy = entity.getUpdateBy();
        if (updateBy != null) {
            stmt.bindString(5, updateBy);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(6, updateTime);
        }
 
        String delFlag = entity.getDelFlag();
        if (delFlag != null) {
            stmt.bindString(7, delFlag);
        }
 
        String openStatus = entity.getOpenStatus();
        if (openStatus != null) {
            stmt.bindString(8, openStatus);
        }
 
        String inspectionItemName = entity.getInspectionItemName();
        if (inspectionItemName != null) {
            stmt.bindString(9, inspectionItemName);
        }
 
        String samplingNumber = entity.getSamplingNumber();
        if (samplingNumber != null) {
            stmt.bindString(10, samplingNumber);
        }
 
        String sampleFrequency = entity.getSampleFrequency();
        if (sampleFrequency != null) {
            stmt.bindString(11, sampleFrequency);
        }
 
        String defaultSpeed = entity.getDefaultSpeed();
        if (defaultSpeed != null) {
            stmt.bindString(12, defaultSpeed);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(13, unit);
        }
 
        String equipmentLevel = entity.getEquipmentLevel();
        if (equipmentLevel != null) {
            stmt.bindString(14, equipmentLevel);
        }
 
        String pollingType = entity.getPollingType();
        if (pollingType != null) {
            stmt.bindString(15, pollingType);
        }
 
        String pollingStatus = entity.getPollingStatus();
        if (pollingStatus != null) {
            stmt.bindString(16, pollingStatus);
        }
 
        String emissivity = entity.getEmissivity();
        if (emissivity != null) {
            stmt.bindString(17, emissivity);
        }
 
        String upperUp = entity.getUpperUp();
        if (upperUp != null) {
            stmt.bindString(18, upperUp);
        }
 
        String upper = entity.getUpper();
        if (upper != null) {
            stmt.bindString(19, upper);
        }
 
        String floor = entity.getFloor();
        if (floor != null) {
            stmt.bindString(20, floor);
        }
 
        String floorFl = entity.getFloorFl();
        if (floorFl != null) {
            stmt.bindString(21, floorFl);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(22, remark);
        }
 
        String standbyI = entity.getStandbyI();
        if (standbyI != null) {
            stmt.bindString(23, standbyI);
        }
 
        String standbyII = entity.getStandbyII();
        if (standbyII != null) {
            stmt.bindString(24, standbyII);
        }
 
        String standbyIII = entity.getStandbyIII();
        if (standbyIII != null) {
            stmt.bindString(25, standbyIII);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1);
    }    

    @Override
    public Inspection readEntity(Cursor cursor, int offset) {
        Inspection entity = new Inspection( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // facilityId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // createBy
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // createTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // updateBy
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // updateTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // delFlag
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // openStatus
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // inspectionItemName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // samplingNumber
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // sampleFrequency
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // defaultSpeed
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // unit
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // equipmentLevel
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // pollingType
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // pollingStatus
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // emissivity
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // upperUp
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // upper
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // floor
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // floorFl
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // remark
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // standbyI
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // standbyII
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24) // standbyIII
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Inspection entity, int offset) {
        entity.setFacilityId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setCreateBy(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCreateTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUpdateBy(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUpdateTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDelFlag(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setOpenStatus(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setInspectionItemName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSamplingNumber(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSampleFrequency(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDefaultSpeed(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setUnit(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setEquipmentLevel(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setPollingType(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setPollingStatus(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setEmissivity(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setUpperUp(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setUpper(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setFloor(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setFloorFl(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setRemark(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setStandbyI(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setStandbyII(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setStandbyIII(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Inspection entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Inspection entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Inspection entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "inspectionItemList" to-many relationship of Facility. */
    public List<Inspection> _queryFacility_InspectionItemList(Long facilityId) {
        synchronized (this) {
            if (facility_InspectionItemListQuery == null) {
                QueryBuilder<Inspection> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.FacilityId.eq(null));
                facility_InspectionItemListQuery = queryBuilder.build();
            }
        }
        Query<Inspection> query = facility_InspectionItemListQuery.forCurrentThread();
        query.setParameter(0, facilityId);
        return query.list();
    }

}
